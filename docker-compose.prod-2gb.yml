services:
  # MongoDB (Optimized for 2GB server)
  mongodb:
    image: mongo:7
    container_name: cosmos2048-mongodb-prod-2gb
    expose:
      - "27017"
    environment:
      - MONGO_INITDB_DATABASE=cosmos2048_prod
    volumes:
      - mongodb_data:/data/db
    networks:
      - cosmos2048-network
    restart: unless-stopped
    # Conservative memory limits for 2GB server
    deploy:
      resources:
        limits:
          memory: 400M
          cpus: '0.8'
        reservations:
          memory: 200M
          cpus: '0.4'
    # Optimized MongoDB settings for limited RAM
    command: mongod --wiredTigerCacheSizeGB 0.3 --quiet --slowms 1000
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' || mongo --eval 'db.adminCommand(\"ping\")'"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s

  # Backend API (Optimized for 2GB)
  api:
    build: 
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: cosmos2048-api-prod-2gb
    expose:
      - "5017"
    environment:
      - NODE_ENV=production
      - PORT=5017
      - MONGODB_URI=mongodb://mongodb:27017/cosmos2048_prod
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-key}
      # Conservative Node.js memory settings
      - NODE_OPTIONS=--max_old_space_size=400 --optimize-for-size
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - cosmos2048-network
    restart: unless-stopped
    # Memory limits for API
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.8'
        reservations:
          memory: 250M
          cpus: '0.4'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=10", "http://localhost:5017/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Frontend Next.js (Production build, optimized for 2GB)
  web:
    build: 
      context: ./apps/web
      dockerfile: Dockerfile
      target: production
    container_name: cosmos2048-frontend-prod-2gb
    expose:
      - "3017"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost/api
      # Conservative Next.js memory settings
      - NODE_OPTIONS=--max_old_space_size=600 --optimize-for-size
    depends_on:
      api:
        condition: service_healthy
    networks:
      - cosmos2048-network
    restart: unless-stopped
    # Memory limits for frontend
    deploy:
      resources:
        limits:
          memory: 800M
          cpus: '1.0'
        reservations:
          memory: 400M
          cpus: '0.5'
    # Extended health check for slower startup
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=15", "http://localhost:3017/"]
      interval: 45s
      timeout: 20s
      retries: 8
      start_period: 120s

  # Nginx Reverse Proxy (Extended timeouts for 2GB server)
  nginx:
    image: nginx:alpine
    container_name: cosmos2048-nginx-prod-2gb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod-2gb.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/maintenance.html:/usr/share/nginx/html/maintenance.html:ro
      # Volume for SSL certificates (optional)
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - cosmos2048-network
    restart: unless-stopped
    # Minimal memory for Nginx
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.3'
        reservations:
          memory: 50M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  cosmos2048-network:
    driver: bridge
    name: cosmos2048-prod-2gb-network

volumes:
  # Persistent volumes for production
  mongodb_data:
    name: cosmos2048-mongodb-prod-2gb-data