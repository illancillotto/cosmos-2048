services:
  # MongoDB for production
  mongodb:
    image: mongo:7
    container_name: cosmos2048-mongodb-prod
    expose:
      - "27017"
    environment:
      - MONGO_INITDB_DATABASE=cosmos2048_prod
    volumes:
      - mongodb_prod_data:/data/db
    networks:
      - cosmos2048-prod-network
    restart: unless-stopped
    # Production MongoDB settings
    command: mongod --wiredTigerCacheSizeGB 0.5 --quiet
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' || mongo --eval 'db.adminCommand(\"ping\")'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API for production
  api:
    build: 
      context: ./apps/api
      dockerfile: Dockerfile
      target: production
    container_name: cosmos2048-api-prod
    expose:
      - "5017"
    environment:
      - NODE_ENV=production
      - PORT=5017
      - MONGODB_URI=mongodb://mongodb:27017/cosmos2048_prod
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-key}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - cosmos2048-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=10", "http://localhost:5017/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Frontend Next.js for production
  web:
    build: 
      context: ./apps/web
      dockerfile: Dockerfile
      target: production
    container_name: cosmos2048-web-prod
    expose:
      - "3017"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost/api
    depends_on:
      api:
        condition: service_healthy
    networks:
      - cosmos2048-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=15", "http://localhost:3017/"]
      interval: 45s
      timeout: 20s
      retries: 8
      start_period: 120s

  # Nginx Reverse Proxy for production
  nginx:
    image: nginx:alpine
    container_name: cosmos2048-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/maintenance.html:/usr/share/nginx/html/maintenance.html:ro
      # Volume for SSL certificates (optional)
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - cosmos2048-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  cosmos2048-prod-network:
    driver: bridge
    name: cosmos2048-prod-network

volumes:
  mongodb_prod_data:
    name: cosmos2048-mongodb-prod-data